from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from sqlalchemy import func
from datetime import datetime, timedelta

from config import settings
from database import get_db
from models import User, Subscription, Payment, Tariff

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in settings.ADMIN_IDS

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    db = next(get_db())
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = await db.query(func.count(User.id)).scalar()
    active_subscriptions = await db.query(func.count(Subscription.id)).filter(
        Subscription.is_active == True
    ).scalar()
    total_payments = await db.query(func.count(Payment.id)).scalar()
    total_revenue = await db.query(func.sum(Payment.amount)).filter(
        Payment.status == "completed"
    ).scalar() or 0
    
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
        f"üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
        f"üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue}‚ÇΩ"
    )

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(update.effective_user.id):
        return
    
    db = next(get_db())
    users = await db.query(User).all()
    
    if not users:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        message += f"ID: {user.telegram_id}\n"
        message += f"Username: @{user.username or '–ù–µ—Ç'}\n"
        message += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n"
        message += f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if user.is_active else '–ù–µ—Ç'}\n"
        message += "-------------------\n"
    
    await update.message.reply_text(message)

async def admin_tariffs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    if not is_admin(update.effective_user.id):
        return
    
    db = next(get_db())
    tariffs = await db.query(Tariff).all()
    
    if not tariffs:
        await update.message.reply_text("–¢–∞—Ä–∏—Ñ–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    keyboard = []
    for tariff in tariffs:
        keyboard.append([
            InlineKeyboardButton(
                f"{tariff.name} - {tariff.price}‚ÇΩ",
                callback_data=f"admin_tariff_{tariff.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="admin_add_tariff")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏:",
        reply_markup=reply_markup
    )

async def admin_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π"""
    if not is_admin(update.effective_user.id):
        return
    
    db = next(get_db())
    payments = await db.query(Payment).order_by(Payment.created_at.desc()).limit(10).all()
    
    if not payments:
        await update.message.reply_text("–ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    message = "üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n\n"
    for payment in payments:
        message += f"ID: {payment.payment_id}\n"
        message += f"–°—É–º–º–∞: {payment.amount}{payment.currency}\n"
        message += f"–°—Ç–∞—Ç—É—Å: {payment.status}\n"
        message += f"–î–∞—Ç–∞: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        message += "-------------------\n"
    
    await update.message.reply_text(message)

def setup_admin_handlers(application):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    application.add_handler(CommandHandler("admin_users", admin_users))
    application.add_handler(CommandHandler("admin_tariffs", admin_tariffs))
    application.add_handler(CommandHandler("admin_payments", admin_payments)) 