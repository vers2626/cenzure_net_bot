import uuid
import base64
from typing import Optional
from datetime import datetime, timedelta

def generate_vpn_config(
    server: str,
    port: int,
    email: str,
    protocol: str = "vless",
    network: str = "tcp",
    security: str = "none"
) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN"""
    if protocol == "vless":
        config = f"vless://{email}@{server}:{port}?encryption=none&security={security}&type={network}"
    else:
        raise ValueError(f"Unsupported protocol: {protocol}")
    
    return config

def generate_qr_code(config: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞
    return config

def format_traffic(bytes_value: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes_value < 1024:
            return f"{bytes_value:.2f}{unit}"
        bytes_value /= 1024
    return f"{bytes_value:.2f}PB"

def calculate_expiry_date(days: int) -> datetime:
    """–†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    return datetime.utcnow() + timedelta(days=days)

def is_subscription_active(end_date: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    return datetime.utcnow() < end_date

def generate_payment_id() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–ª–∞—Ç–µ–∂–∞"""
    return f"vpn_{uuid.uuid4().hex[:8]}"

def format_subscription_info(
    start_date: datetime,
    end_date: datetime,
    up_traffic: int,
    down_traffic: int
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    return (
        f"üìÖ –ù–∞—á–∞–ª–æ: {start_date.strftime('%d.%m.%Y')}\n"
        f"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date.strftime('%d.%m.%Y')}\n"
        f"‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {format_traffic(up_traffic)}\n"
        f"‚¨áÔ∏è –ü–æ–ª—É—á–µ–Ω–æ: {format_traffic(down_traffic)}"
    ) 